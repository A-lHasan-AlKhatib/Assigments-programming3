/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FinalProject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.InputMismatchException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Handy
 */
public class StdFrame extends javax.swing.JFrame {

    /**
     * Creates new form StdFrame
     */
    public StdFrame() {
        try {
            initComponents();
            this.setLocationRelativeTo(null);
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java","root","");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM exams_info");
            ResultSet set = ps.executeQuery();           
            set.last();
            int rows = set.getRow();
            set.beforeFirst();
            Object[][] data = new String[rows][5];          
            Object[] cols = new Object[5];           
            cols[0] = "Teatcher name";
            cols[1] = "Course name";
            cols[2] = "Room";
            cols[3] = "Date";
            cols[4] = "Time";                       
            for (int i = 0; i < data.length; i++) {
                set.next();
                data[i][0] = set.getString("Teatcher name");
                data[i][1] = set.getString("Course name");
                data[i][2] = set.getString("room");
                data[i][3] = set.getString("date");
                data[i][4] = set.getString("time");                                
            }        
            DefaultTableModel model = new DefaultTableModel(data, cols);
            allTable.setModel(model);
            
            MainFrame.writeLog("StdFrame opend and all exams has been retrived from the data base . Number of fetched row = "+rows);
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        allRef = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        specRef = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        radioCourse = new javax.swing.JRadioButton();
        radioTeacher = new javax.swing.JRadioButton();
        specField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        specTable = new javax.swing.JTable();
        stdBack = new javax.swing.JButton();

        group.add(radioCourse);
        group.add(radioTeacher);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        allRef.setText("refresh");
        allRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRefActionPerformed(evt);
            }
        });

        allTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Teacher name", "Course name", "Room", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(allTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(allRef)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allRef)
                .addContainerGap())
        );

        jTabbedPane1.addTab("View all tests", jPanel1);

        specRef.setText("search");
        specRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specRefActionPerformed(evt);
            }
        });

        jLabel1.setText("by :");

        radioCourse.setSelected(true);
        radioCourse.setText("Course name");
        radioCourse.setToolTipText("");

        radioTeacher.setText("Teacher Name");

        specTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Teacher name", "Course name", "Room", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(specTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(specRef)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioCourse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radioTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(specField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioCourse)
                            .addComponent(radioTeacher)
                            .addComponent(jLabel1)
                            .addComponent(specField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(specRef)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("View specific tests", jPanel2);

        stdBack.setText("Back");
        stdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stdBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stdBack, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(191, 191, 191))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(stdBack, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("View all tests");

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void stdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stdBackActionPerformed
        MainFrame f = new MainFrame();
        f.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_stdBackActionPerformed

    private void specRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specRefActionPerformed
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java","root","");
            PreparedStatement ps;
            String search = "";
            if(radioCourse.isSelected()){
                ps = con.prepareStatement("SELECT * FROM exams_info WHERE `Course name` = '"+specField.getText()+"'");
                search = "course = " + specField.getText();
            }else{
                ps = con.prepareStatement("SELECT * FROM exams_info WHERE `Teatcher name` = '"+specField.getText()+"'");
                search = "teacher = " + specField.getText();
            }
            ResultSet set = ps.executeQuery();           
            try {
                set.last();            
                int rows = set.getRow();
            set.beforeFirst();
            Object[][] data = new String[rows][5];
             Object[] cols = new Object[5];           
            cols[0] = "Teatcher name";
            cols[1] = "Course name";
            cols[2] = "Room";
            cols[3] = "Date";
            cols[4] = "Time";   
            for (int i = 0; i < data.length; i++) {
                set.next();
                data[i][0] = set.getString("Teatcher name");
                data[i][1] = set.getString("Course name");
                data[i][2] = set.getString("room");
                data[i][3] = set.getString("date");
                data[i][4] = set.getString("time");
            }
            DefaultTableModel model = new DefaultTableModel(data, cols);
            specTable.setModel(model);
            specField.setText("");
            MainFrame.writeLog("Search for exam by "+search+" in the database and the results has been retrived . Number of fetched rows = "+rows);
            con.close();
            } catch (SQLException ex) {
                Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_specRefActionPerformed

    private void allRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRefActionPerformed
        
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/java","root","");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM exams_info");
            ResultSet set = ps.executeQuery();                            
            try {
                set.last();            
                int rows = set.getRow();
            set.beforeFirst();
            Object[][] data = new String[rows][5];
             String s =String.format("%-25s %-25s %-10s %-10s %10s\n","Teacher Name", "Course Name",
                    "Room", "Date", "Time");            
            for (int i = 0; i < data.length; i++) {
                set.next();
                data[i][0] = set.getString("Teatcher name");
                data[i][1] = set.getString("Course name");
                data[i][2] = set.getString("room");
                data[i][3] = set.getString("date");
                data[i][4] = set.getString("time");                                
            }
            
            for (int i = 0; i < data.length; i++) {
                s += ( String.format("%-25s %-25s %-10s %-10s %10s\n",data[i][0], data[i][1],
                    data[i][2], data[i][3], data[i][4]));
            }
            Object[] cols = new Object[5];           
            cols[0] = "Teatcher name";
            cols[1] = "Course name";
            cols[2] = "Room";
            cols[3] = "Date";
            cols[4] = "Time";
            DefaultTableModel model = new DefaultTableModel(data, cols);
            allTable.setModel(model);
            specField.setText("");
            MainFrame.writeLog("Refresh and all exams has been retrived from the data base . Number of fetched rows = "+rows);
            con.close();
            } catch (SQLException ex) {
                Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch(InputMismatchException i){
            JOptionPane.showMessageDialog(null, "Wrong input type !!", "Error!", JOptionPane.WARNING_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(StdFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_allRefActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StdFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StdFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allRef;
    private javax.swing.JTable allTable;
    private javax.swing.ButtonGroup group;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton radioCourse;
    private javax.swing.JRadioButton radioTeacher;
    private javax.swing.JTextField specField;
    private javax.swing.JButton specRef;
    private javax.swing.JTable specTable;
    private javax.swing.JButton stdBack;
    // End of variables declaration//GEN-END:variables
}
